import {describe, expect, test} from 'vitest';
import {SRGBToHsl, SRGBToHwb, hslToSRGB, hwbToSRGB} from './utils';

describe('hslToSRGB', () => {
  test.each([
    [0, 0, 0, [0, 0, 0]],
    [0, 0, 1, [1, 1, 1]],
    [0, 1, 0.5, [1, 0, 0]],
    [120, 1, 0.5, [0, 1, 0]],
    [240, 1, 0.5, [0, 0, 1]],
    [60, 1, 0.5, [1, 1, 0]],
    [180, 1, 0.5, [0, 1, 1]],
    [300, 1, 0.5, [1, 0, 1]],
    [0, 0, 0.75, [0.75, 0.75, 0.75]],
    [0, 0, 0.5, [0.5, 0.5, 0.5]],
    [0, 1, 0.25, [0.5, 0, 0]],
    [60, 1, 0.25, [0.5, 0.5, 0]],
    [120, 1, 0.25, [0, 0.5, 0]],
    [300, 1, 0.25, [0.5, 0, 0.5]],
    [180, 1, 0.25, [0, 0.5, 0.5]],
    [240, 1, 0.25, [0, 0, 0.5]],
    [-60, 1, 0.25, [0.5, 0, 0.5]],
  ])('hslToSRGB(%d, %d, %d) -> %j', (h, s, l, expectedRgb) => {
    expect(hslToSRGB(h, s, l)).toEqual(expectedRgb);
  });
});

describe('SRGBToHsl', () => {
  test.each([
    [0, 0, 0, [0, 0, 0]],
    [1, 1, 1, [0, 0, 1]],
    [1, 0, 0, [0, 1, 0.5]],
    [0, 1, 0, [120, 1, 0.5]],
    [0, 0, 1, [240, 1, 0.5]],
    [1, 1, 0, [60, 1, 0.5]],
    [0, 1, 1, [180, 1, 0.5]],
    [1, 0, 1, [300, 1, 0.5]],
    [1, 1, 1, [0, 0, 1]],
    [0.75, 0.75, 0.75, [0, 0, 0.75]],
    [0.5, 0.5, 0.5, [0, 0, 0.5]],
    [0.5, 0, 0, [0, 1, 0.25]],
    [0.5, 0.5, 0, [60, 1, 0.25]],
    [0, 0.5, 0, [120, 1, 0.25]],
    [0.5, 0, 0.5, [300, 1, 0.25]],
    [0, 0.5, 0.5, [180, 1, 0.25]],
    [0, 0, 0.5, [240, 1, 0.25]],
    [2, 0, 0, [0, 0, 1]],
  ])('SRGBToHsl(%d, %d, %d) -> %j', (r, g, b, expectedHSL) => {
    expect(SRGBToHsl(r, g, b)).toEqual(expectedHSL);
  });
});

describe('hwbToSRGB', () => {
  test.each([
    [0, 0, 1, [0, 0, 0]],
    [0, 1, 0, [1, 1, 1]],
    [0, 0, 0, [1, 0, 0]],
    [120, 0, 0, [0, 1, 0]],
    [240, 0, 0, [0, 0, 1]],
    [60, 0, 0, [1, 1, 0]],
    [180, 0, 0, [0, 1, 1]],
    [300, 0, 0, [1, 0, 1]],
    [0, 0.75, 0.25, [0.75, 0.75, 0.75]],
    [0, 0.5, 0.5, [0.5, 0.5, 0.5]],
    [0, 0, 0.5, [0.5, 0, 0]],
    [60, 0, 0.5, [0.5, 0.5, 0]],
    [120, 0, 0.5, [0, 0.5, 0]],
    [300, 0, 0.5, [0.5, 0, 0.5]],
    [180, 0, 0.5, [0, 0.5, 0.5]],
    [240, 0, 0.5, [0, 0, 0.5]],
  ])('hwbToSRGB(%d, %d, %d) -> %j', (h, w, b, expectedRgb) => {
    expect(hwbToSRGB(h, w, b)).toEqual(expectedRgb);
  });
});

describe('SRGBToHwb', () => {
  test.each([
    [0, 0, 0, [0, 0, 1]],
    [1, 1, 1, [0, 1, 0]],
    [1, 0, 0, [0, 0, 0]],
    [0, 1, 0, [120, 0, 0]],
    [0, 0, 1, [240, 0, 0]],
    [1, 1, 0, [60, 0, 0]],
    [0, 1, 1, [180, 0, 0]],
    [1, 0, 1, [300, 0, 0]],
    [0.75, 0.75, 0.75, [0, 0.75, 0.25]],
    [0.5, 0.5, 0.5, [0, 0.5, 0.5]],
    [0.5, 0, 0, [0, 0, 0.5]],
    [0.5, 0.5, 0, [60, 0, 0.5]],
    [0, 0.5, 0, [120, 0, 0.5]],
    [0.5, 0, 0.5, [300, 0, 0.5]],
    [0, 0.5, 0.5, [180, 0, 0.5]],
    [0, 0, 0.5, [240, 0, 0.5]],
  ])('SRGBToHwb(%d, %d, %d) -> %j', (r, g, b, expectedRgb) => {
    expect(SRGBToHwb(r, g, b)).toEqual(expectedRgb);
  });
});
